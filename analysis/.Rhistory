}
unique(trials$pid)
which(folders == folderName)
(100 * (1 - which(folders == folderName)))
source('src/ESM_core.R')
path <- "G:/Documents/University/Google Drive/Project Documents/AdvisorChoice/results"
folders <- list.dirs(path, recursive = T)
folders <- folders[grepl("processed$", folders)]
tmp <- NULL
for (folderName in folders) {
if (!length(list.files(folderName)))
next()
results <- loadFilesFromFolder(folderName)
results <- removeParticipantIds(results)
# unpack results
for (i in 1:length(results))
assign(names(results)[i], results[i][[1]])
trials <- cbind(trials, trialUtilityVariables(results))
trials <- trials[trials$practice == F, ]
# merge columns
if (!is.null(tmp)) {
x <- list(names(tmp), names(trials))
if (!all(x[[1]] %in% x[[2]]))
trials[, x[[1]][!(x[[1]] %in% x[[2]])]] <- NA
if (!all(x[[2]] %in% x[[1]]))
tmp[, names(tmp)[!(x[[2]] %in% x[[1]])]] <- NA
}
# pad the PIDs so they don't overlap
trials$pid <- trials$pid + 100 * (which(folders == folderName) - 1)
tmp <- rbind(tmp, trials)
}
unique(trials$pid)
folders == folderName
folderName <- folders[5]
folders == folderName
source('src/ESM_core.R')
path <- "G:/Documents/University/Google Drive/Project Documents/AdvisorChoice/results"
folders <- list.dirs(path, recursive = T)
folders <- folders[grepl("processed$", folders)]
tmp <- NULL
for (folderName in folders) {
cat(paste('Extracting', length(list.files(folderName)), 'files from', folderName))
if (!length(list.files(folderName)))
next()
results <- loadFilesFromFolder(folderName)
results <- removeParticipantIds(results)
# unpack results
for (i in 1:length(results))
assign(names(results)[i], results[i][[1]])
trials <- cbind(trials, trialUtilityVariables(results))
trials <- trials[trials$practice == F, ]
# merge columns
if (!is.null(tmp)) {
x <- list(names(tmp), names(trials))
if (!all(x[[1]] %in% x[[2]]))
trials[, x[[1]][!(x[[1]] %in% x[[2]])]] <- NA
if (!all(x[[2]] %in% x[[1]]))
tmp[, names(tmp)[!(x[[2]] %in% x[[1]])]] <- NA
}
# pad the PIDs so they don't overlap
trials$pid <- trials$pid + 100 * (which(folders == folderName) - 1)
tmp <- rbind(tmp, trials)
}
unique(trials$pid)
source('src/ESM_core.R')
path <- "G:/Documents/University/Google Drive/Project Documents/AdvisorChoice/results"
folders <- list.dirs(path, recursive = T)
folders <- folders[grepl("processed$", folders)]
tmp <- NULL
for (folderName in folders) {
print(paste('Extracting', length(list.files(folderName)), 'files from', folderName))
if (!length(list.files(folderName)))
next()
results <- loadFilesFromFolder(folderName)
results <- removeParticipantIds(results)
# unpack results
for (i in 1:length(results))
assign(names(results)[i], results[i][[1]])
trials <- cbind(trials, trialUtilityVariables(results))
trials <- trials[trials$practice == F, ]
# merge columns
if (!is.null(tmp)) {
x <- list(names(tmp), names(trials))
if (!all(x[[1]] %in% x[[2]]))
trials[, x[[1]][!(x[[1]] %in% x[[2]])]] <- NA
if (!all(x[[2]] %in% x[[1]]))
tmp[, names(tmp)[!(x[[2]] %in% x[[1]])]] <- NA
}
# pad the PIDs so they don't overlap
print(rang(trials$pid))
trials$pid <- trials$pid + 100 * (which(folders == folderName) - 1)
print(rang(trials$pid))
tmp <- rbind(tmp, trials)
}
source('src/ESM_core.R')
path <- "G:/Documents/University/Google Drive/Project Documents/AdvisorChoice/results"
folders <- list.dirs(path, recursive = T)
folders <- folders[grepl("processed$", folders)]
tmp <- NULL
for (folderName in folders) {
print(paste('Extracting', length(list.files(folderName)), 'files from', folderName))
if (!length(list.files(folderName)))
next()
results <- loadFilesFromFolder(folderName)
results <- removeParticipantIds(results)
# unpack results
for (i in 1:length(results))
assign(names(results)[i], results[i][[1]])
trials <- cbind(trials, trialUtilityVariables(results))
trials <- trials[trials$practice == F, ]
# merge columns
if (!is.null(tmp)) {
x <- list(names(tmp), names(trials))
if (!all(x[[1]] %in% x[[2]]))
trials[, x[[1]][!(x[[1]] %in% x[[2]])]] <- NA
if (!all(x[[2]] %in% x[[1]]))
tmp[, names(tmp)[!(x[[2]] %in% x[[1]])]] <- NA
}
# pad the PIDs so they don't overlap
print(range(trials$pid))
trials$pid <- trials$pid + 100 * (which(folders == folderName) - 1)
print(range(trials$pid))
tmp <- rbind(tmp, trials)
}
unique(tmp$pid)
trials <- tmp
rm('tmp')
tmp <- NULL
range(tmp$initialConfidence)
range(trials$initialConfidence)
sum(is.na(trials$initialConfidence))
tmp <- trials
trials <- tmp[!is.na(tmp$finalConfidence), ]
tmp <- NULL
sum(is.na(trials$initialConfidence))
tmp <- tmp[!is.na(tmp$finalConfidence), ]
tmp$pre <- tmp$initialConfidence
range(tmp$pre)
tmp <- trials
tmp <- tmp[!is.na(tmp$finalConfidence), ]
tmp$pre <- tmp$initialConfidence
range(tmp$pre)
tmp$post <- ifelse(tmp$initialAnswer == 1, tmp$finalConfSpan, tmp$finalConfSpan * -1)
tmp$weight <- tmp$post / tmp$pre
tmp$pre <- (tmp$pre + 1) / 52
tmp$post <- (tmp$post + 1) / 52
tmp$weight <- tmp$post / tmp$pre
source('src/ESM_core.R')
path <- "G:/Documents/University/Google Drive/Project Documents/AdvisorChoice/results"
folders <- list.dirs(path, recursive = T)
folders <- folders[grepl("processed$", folders)]
tmp <- NULL
for (folderName in folders) {
print(paste('Extracting', length(list.files(folderName)), 'files from', folderName))
if (!length(list.files(folderName)))
next()
results <- loadFilesFromFolder(folderName)
results <- removeParticipantIds(results)
# unpack results
for (i in 1:length(results))
assign(names(results)[i], results[i][[1]])
trials <- cbind(trials, trialUtilityVariables(results))
trials <- trials[trials$practice == F, ]
# merge columns
if (!is.null(tmp)) {
x <- list(names(tmp), names(trials))
if (!all(x[[1]] %in% x[[2]]))
trials[, x[[1]][!(x[[1]] %in% x[[2]])]] <- NA
if (!all(x[[2]] %in% x[[1]]))
tmp[, names(tmp)[!(x[[2]] %in% x[[1]])]] <- NA
}
tmp$folderName <- folderName
# pad the PIDs so they don't overlap
print(range(trials$pid))
trials$pid <- trials$pid + 100 * (which(folders == folderName) - 1)
print(range(trials$pid))
tmp <- rbind(tmp, trials)
}
source('src/ESM_core.R')
path <- "G:/Documents/University/Google Drive/Project Documents/AdvisorChoice/results"
folders <- list.dirs(path, recursive = T)
folders <- folders[grepl("processed$", folders)]
tmp <- NULL
for (folderName in folders) {
print(paste('Extracting', length(list.files(folderName)), 'files from', folderName))
if (!length(list.files(folderName)))
next()
results <- loadFilesFromFolder(folderName)
results <- removeParticipantIds(results)
# unpack results
for (i in 1:length(results))
assign(names(results)[i], results[i][[1]])
trials <- cbind(trials, trialUtilityVariables(results))
trials <- trials[trials$practice == F, ]
# merge columns
if (!is.null(tmp)) {
x <- list(names(tmp), names(trials))
if (!all(x[[1]] %in% x[[2]]))
trials[, x[[1]][!(x[[1]] %in% x[[2]])]] <- NA
if (!all(x[[2]] %in% x[[1]]))
tmp[, names(tmp)[!(x[[2]] %in% x[[1]])]] <- NA
}
trials$folderName <- folderName
# pad the PIDs so they don't overlap
print(range(trials$pid))
trials$pid <- trials$pid + 100 * (which(folders == folderName) - 1)
print(range(trials$pid))
tmp <- rbind(tmp, trials)
}
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/adviceUsage.R', echo=TRUE)
regmatches(folderName, regexpr("([0-9\\-]+[a-zA-Z0-9 ]*)/", folderName))
length(unique(tmp$pid))
# fix for older trials sometimes having wrong advisorAgrees variable
tmp$advisorAgrees <- tmp$adviceSide == tmp$initialAnswer
tmp$pre <- tmp$initialConfidence
tmp$post <- ifelse(tmp$initialAnswer == 1, tmp$finalConfSpan, tmp$finalConfSpan * -1)
tmp$weight <- tmp$post / tmp$pre
tmp$pre <- (tmp$pre + 1) / 52
tmp$post <- (tmp$post + 1) / 52
tmp$weight <- tmp$post / tmp$pre
ggplot(tmp[tmp$pid < 100, ], aes(log(weight), fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..), position = "dodge") +
# geom_freqpoly(bins = 100, aes(colour = factor(pid), y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = regmatches(folderName, regexpr("([0-9\\-]+[a-zA-Z0-9 ]*)/", folderName)))
ggplot(tmp[tmp$pid < 100, ], aes(log(weight), fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..), position = "dodge") +
# geom_freqpoly(bins = 100, aes(colour = factor(pid), y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = paste('Data from all participants, N =', length(unique(tmp$pid))))
ggplot(tmp[tmp$pid < 100, ], aes(log(weight), fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..), position = "dodge") +
# geom_freqpoly(bins = 100, aes(colour = factor(pid), y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
caption = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp)))
ggplot(tmp[tmp$pid < 100, ], aes(log(weight), fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..), position = "dodge") +
# geom_freqpoly(bins = 100, aes(colour = factor(pid), y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp)))
table(round(tmp$weight))
hist(table(round(tmp$weight)))
hist(round(tmp$weight))
exp(1)
log(1)
ggplot(tmp[tmp$pid < 100, ], aes(log(post/pre), fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..), position = "dodge") +
# geom_freqpoly(bins = 100, aes(colour = factor(pid), y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp)))
ggplot(tmp[tmp$pid < 100, ], aes(log(post / pre), fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..), position = "dodge") +
# geom_freqpoly(bins = 100, aes(colour = factor(pid), y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp)))
50/45
50/50
45/45
log(1)
log(2.7)
50/25
hist(tmp$advisorInfluence)
ggplot(tmp, aes(log(post / pre), fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..), position = "dodge") +
# geom_freqpoly(bins = 100, aes(colour = factor(pid), y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp)))
ggplot(tmp, aes(advisorInfluence, fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp)))
ggplot(tmp, aes(log(post / pre), fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..), position = "dodge") +
# geom_freqpoly(bins = 100, aes(colour = factor(pid), y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp)))
ggplot(tmp, aes(advisorInfluenceRaw, fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp)))
library(gganimate)
?gganimate
?ease_aes
ggplot(tmp, aes(advisorInfluenceRaw, fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp))) +
enter_appear() +
exit_disappear() +
transition_states(pid, transition_length = 0, state_length = 1)
unique(tmp$pid)
ggplot(tmp, aes(advisorInfluenceRaw, fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp))) +
enter_appear() +
exit_disappear() +
transition_states(pid, transition_length = .5, state_length = 3)
ggplot(tmp[tmp$pid < 50, ], aes(advisorInfluenceRaw, fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp))) +
enter_appear() +
transition_states(pid, transition_length = 0, state_length = 3)
a <- ggplot(tmp[tmp$pid < 50, ], aes(advisorInfluenceRaw, fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Participant {closest_state}',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp))) +
enter_appear() +
transition_states(pid, transition_length = 0, state_length = 3, wrap = T)
animate(a)
animate(a)
ggplot(iris, aes(Sepal.Width, Petal.Width)) +
geom_point() +
labs(title = "{closest_state}") +
transition_states(Species, transition_length = 3, state_length = 1)
names(iris)
unique(tmp$pid[tmp$pid < 50])
a <- ggplot(tmp[tmp$pid < 5, ], aes(advisorInfluenceRaw, fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Participant {closest_state}',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp))) +
# enter_appear() +
transition_states(pid, transition_length = .1, state_length = 3)
animate(a)
a <- ggplot(tmp[tmp$pid < 50, ], aes(advisorInfluenceRaw, fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Participant {closest_state}',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp))) +
# enter_appear() +
transition_states(pid, transition_length = .5, state_length = 3)
animate(a)
a <- ggplot(tmp[tmp$pid < 150, ], aes(advisorInfluenceRaw, fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Participant {closest_state}',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp))) +
# enter_appear() +
transition_states(pid, transition_length = .5, state_length = 3)
animate(a)
a <- ggplot(tmp[tmp$pid < 50, ], aes(advisorInfluenceRaw, fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..)) +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Participant {closest_state}',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp))) +
# enter_appear() +
transition_states(pid, transition_length = .5, state_length = 3)
animate(a)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/adviceUsage.R', echo=TRUE)
source('~/University/Programming/Quick Analysis Scripts/Inability to ignore useless advice/analysis.r', echo=TRUE)
ggplot(allData[!is.na(allData$ATcat), ], aes(x = ATcat)) +
geom_histogram(stat = "count") +
facet_wrap(~experiment, labeller = label_both, scales = "free_y") +
theme_light() +
bbplot::bbc_style() +
theme(strip.text.x = element_text(colour = 'black', hjust = .5),
axis.text.x = element_text(size = 10))
ggplot(allData[!is.na(allData$ATcat), ], aes(x = ATcat)) +
geom_histogram(stat = "count") +
facet_wrap(~experiment, labeller = label_both, scales = "free_y") +
theme_light() +
bbplot::bbc_style() +
theme(strip.text.x = element_text(colour = 'black', hjust = .5),
axis.text = element_text(size = 10))
ggplot(allData[!is.na(allData$ATcat), ], aes(x = ATcat)) +
geom_histogram(stat = "count") +
facet_wrap(~experiment, labeller = label_both, scales = "free_y") +
theme_light() +
bbplot::bbc_style() +
theme(strip.text.x = element_text(colour = 'black', hjust = .5),
text = element_text(size = 10))
ggplot(allData[!is.na(allData$ATcat), ], aes(x = ATcat)) +
geom_histogram(stat = "count") +
facet_wrap(~experiment, labeller = label_both, scales = "free_y") +
theme_light() +
bbplot::bbc_style() +
theme(strip.text.x = element_text(colour = 'black', hjust = .5),
axis.text = element_text(size = 12))
# Load required packages etc ----------------------------------------------
source('src/ESM_core.R')
# Folder crawling ---------------------------------------------------------
path <- "G:/Documents/University/Google Drive/Project Documents/AdvisorChoice/results"
folders <- list.dirs(path, recursive = T)
folders <- folders[grepl("processed$", folders)]
tmp <- NULL
for (folderName in folders) {
print(paste('Extracting', length(list.files(folderName)), 'files from', folderName))
if (!length(list.files(folderName)))
next()
results <- loadFilesFromFolder(folderName)
results <- removeParticipantIds(results)
# unpack results
for (i in 1:length(results))
assign(names(results)[i], results[i][[1]])
trials <- cbind(trials, trialUtilityVariables(results))
trials <- trials[trials$practice == F, ]
# merge columns
if (!is.null(tmp)) {
x <- list(names(tmp), names(trials))
if (!all(x[[1]] %in% x[[2]]))
trials[, x[[1]][!(x[[1]] %in% x[[2]])]] <- NA
if (!all(x[[2]] %in% x[[1]]))
tmp[, names(tmp)[!(x[[2]] %in% x[[1]])]] <- NA
}
trials$folderName <- folderName
# pad the PIDs so they don't overlap
trials$pid <- trials$pid + 100 * (which(folders == folderName) - 1)
tmp <- rbind(tmp, trials)
}
tmp <- tmp[!is.na(tmp$finalConfidence), ]
# fix for older trials sometimes having wrong advisorAgrees variable
tmp$advisorAgrees <- tmp$adviceSide == tmp$initialAnswer
tmp$adviceSpan <- ifelse(trials$adviceSide == 0, -50, 50)
nrow(tmp)
tmp$adviceSpan <- ifelse(tmp$adviceSide == 0, -50, 50)
tmp$WoA <- (tmp$finalConfSpan - tmp$initialConfSpan) /
(tmp$adviceSpan - tmp$initialConfSpan)
# truncate bad values
tmp$WoA[tmp$WoA < 0] <- 0
tmp$WoA[tmp$WoA > 1] <- 1
hist(tmp$WoA)
tmp <- tmp[!is.na(tmp$WoA), ]
# histogram
tmp$WoA_f <- cut(tmp$WoA, 10)
ggplot(tmp, aes(WoA_f, fill = advisorAgrees)) +
geom_histogram(bins = 100, aes(y = ..ncount..), position = "dodge") +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp)))
ggplot(tmp, aes(WoA_f, fill = advisorAgrees)) +
geom_histogram(position = "dodge") +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp)))
hist(tmp$WoA_f)
unique(tmp$WoA_f)
ggplot(tmp, aes(WoA_f, fill = advisorAgrees)) +
geom_histogram(stat = "count", position = "dodge") +
facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp)))
ggplot(tmp, aes(WoA_f, fill = advisorAgrees)) +
geom_histogram(stat = "count", position = "dodge") +
# facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp)))
min(tmp$WoA)
max(tmp$WoA)
ggplot(tmp, aes(WoA_f, fill = advisorAgrees)) +
geom_histogram(stat = "count", position = "dodge") +
# facet_wrap(~advisorAgrees, labeller = label_both) +
style.long +
labs(title = 'Data from all participants',
subtitle = paste('Participants =', length(unique(tmp$pid)),
'Trials =', nrow(tmp))) +
theme(legend.position = 'top')
